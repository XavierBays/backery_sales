# coding=utf-8
""" """
# Copyright 2023, Swiss Statistical Design & Innovation S√†rl

import inspect

import numpy as np
import pandas as pd
import streamlit as st
from streamlit_extras.switch_page_button import switch_page

st.set_page_config(
    page_title="Data Cleaning",
    page_icon="üßπ",
)

st.title('Nettoyez les donn√©es !')

st.markdown("""
Dans cette premi√®re partie, vous commencerez √† travailler avec un nouveau jeu de donn√©es. Vous d√©couvrirez quelles sont les premi√®res √©tapes:
1. Charger l'ensemble de donn√©es
2. Nettoyer les donn√©es pour conserver les colonnes int√©ressantes
3. D√©tecter les probl√®mes dans l'ensemble de donn√©es et les r√©soudre

Avant decharger les donn√©es disponibles, il est judicieux de r√©fl√©chir √† la probl√©matique et aux donn√©es n√©cessaires.

**Questions:**
- Avez-vous bien compris ce que vous cherchez √† pr√©dire ?
- Quelles donn√©es pensez-vous n√©cessaires pour r√©pondre √† cette probl√©matique ?
""")

with st.expander("Astuce"):
    st.markdown("""
    Pr√©dire les ventes peut-√™tre interpr√©t√© de diff√©rentes mani√®res. Cette probl√©matiques n'est pas bien d√©finie.
    - Cherche-t-on √† pr√©dire le chiffre d'affaire ?
    - Souhaite-t-on pr√©dire la quantit√© de produits vendus ?
    - Par panier d'achat ou en absolu ? ou alors, par type d'article ?
    - ...

    Pour la suite, nous allons viser la pr√©diction du chiffre d'affaire.
    """)

st.divider()
st.header('Chargez les donn√©es')
st.markdown("""
La premi√®re √©tape consiste √† charger les donn√©es.
On parle g√©n√©ralement d'un processus ETL pour _Extract_ , _Transform_, _Load_ .
Il faut en effet extraire la donn√©es (par exemple depuis son format excel), pour ensuite la transformer (cleaning) puis la placer au bon endroit.

Ne vous faites pas de souci pour l'extraction, on s'en est occup√© pour vous!

Vous pouvez d√©j√† visualiser les donn√©es gr√¢ce au _DataFrame_ ci-dessous.""")


@st.cache_data
def load_data():
    df = pd.read_csv('data/bakery_sales.csv')
    df = df.drop(columns='Unnamed: 0')

    return df


df = load_data()

st.dataframe(df, use_container_width=True)

st.markdown("""
Il est essentiel de commencer par observer vos donn√©es. R√©pondez aux **questions** suivantes:
- Quelles colonnes avez vous √† disposition ?
- Combien y a-t-il de lignes ?
- Manque-t-il des donn√©es ?
- Pensiez-vous avoir plus d'information ?
- Quelle est la variable √† pr√©dire (variable r√©ponse) ?
""")

st.divider()
st.header('Pr√©parez les donn√©es')

st.markdown("""
Un des crit√®res principaux de la qualit√© des donn√©es est le format.
Il est important que le mani√®re de repr√©senter l'information (type) soit coh√©rent avec ce qu'elle signifie.
Par exemple, nous souhaitons que les quantit√©s soient des chiffres (et non des charact√®res).

Observons le type de chacune de nos colonnes:""")

st.dataframe(dict(df.dtypes))


with st.expander("Que signifient ces types ?"):
    st.markdown("""
    - float64: un chiffre √† virgule (repr√©sent√© par 64 bytes)
    - object: un texte ou un format non num√©rique ind√©fini
    """)

st.markdown("""
**Questions**:
- Qu'avez-vous remarqu√© ?
- Y a-t-il des probl√®mes de format ?""")

with st.expander("R√©ponse:"):
    st.markdown("""
    Il y a effectivement quelques probl√®mes √† r√©soudre :
    - Le prix unitaire est au format "string", c'est-√†-dire qu'il ne s'agit pas d'un nombre. Nous devons donc le modifier.
    - Les variables `date` et `time` doivent √™tre dans un format `datetime` sp√©cifique pour √™tre analys√©es correctement.""")

st.markdown("""
Nous allons en profitez pour ajouter une colonne qui nous semble n√©cessaire: le **prix total**. On peut le faire en multipliant la variable `Quantity` par la variable `unit_price`.

Nous allons √©galement supprimer une colonne qui n'est pas n√©cessaire √† l'analyse: `ticket_number`.

Voici le r√©sultat:
""")


@st.cache_data
def clean_df(data):
    """
    Clean the DataFrame for visualization

    Parameters
    ----------
    data : pd.DataFrame
        Original data

    Returns
    -------
    pd.DataFrame
        Cleaned DataFrame ready for visualization
    """

    # Create a datetime variable and use the right type
    data['datetime'] = data['date'] + ' ' + data['time']
    data['datetime'] = pd.to_datetime(data['datetime'])

    # Change unit_price to a float
    data['unit_price'] = data['unit_price'].apply(
        lambda x: float(x[:-2].replace(',', '.')))

    # Compute the full price
    data['full_price'] = data['Quantity'] * data['unit_price']

    # Rename a column
    data = data.rename(columns={'Quantity': 'quantity'})

    # Select all final columns
    data = data[['datetime', 'article',
                 'quantity', 'unit_price', 'full_price']]

    return data


df = clean_df(df)

with st.expander("Vous voulez savoir √† quoi ressemble le code python pour cette √©tape ? Cliquez ici."):
    st.code(inspect.getsource(clean_df), language='python')

st.dataframe(df, use_container_width=True)

st.markdown("""
Selon vous, la variable `ticket_number` √©tait-elle vraiment inutile ? A quoi pourrait-elle nous servir ? 
""")

st.divider()
st.header('Rep√©rez des probl√®mes dans les donn√©es')

st.markdown("""
Nous nous sommes beaucoup concentr√© sur les colonnes. Il est maintenant temps de nous attaquer aux lignes.
Y a-t-il des observations probl√©matiques ? Essayez d'anticiper des erreurs potentielles:
- Quelles valeurs pourraient √™tre erronn√©es pour la variable `quantity` ? 
- et pour la variable `unit_price` ?


Un bon r√©flex consiste g√©n√©ralement √† v√©rifier les statistiques principales telles que la _moyenne_, le _minimum_, le _maximum_, etc.

La table ci-dessous vous pr√©sente pour trois colonnes les statistiques suivantes:
le nombre d'observations, la moyenne, la d√©viation standard, le miniumum, le quantile 25, la m√©diane, le quantile 75, le maximum.

Remarque: dans la tableau ci-dessous la s√©paration entre milliers et centaines est repr√©sent√©e par la virgule.""")

st.dataframe(df.describe(), use_container_width=True)

st.markdown("""
**Questions**:
- Que remarquez-vous ?
- Y a-t-il des valeurs incoh√©rentes ?
- Vos hypoth√®ses se sont-elles av√©r√©es ?
- La variable `full_price` est-elle probl√©matique ?
""")

with st.expander("R√©ponse:"):
    st.markdown("""
    Gr√¢ce √† ces quelques statistiques nous constatons les probl√®mes suivants :
    - La valeur minimale de la variable `quantit√©` est n√©gative.
    - La valeur minimale de la variable `prix_unitaire` est de 0. Cela parait surprenant.

    Il est toutefois important de s'int√©resser au contexte m√©tier pour savoir si ces observations sont probl√©matiques.
    - Quelles questions poseriez-vous au personnel de la boulagerie suite √† ces observations ?

    """)

st.subheader("Nettoyez les probl√®mes de quantit√©")

st.markdown("""
Tout d'abord, abordons le probl√®me de la `quantity`. La premi√®re id√©e pourrait √™tre d'√©carter simplement toutes les lignes si la `quantit√©` est n√©gative.
Cependant, cela pourrait √™tre une erreur.
Imaginez que le vendeur/la vendeuse en boulangerie souhaite simplement annuler une vente suite √† une erreur de caisse.

Observons les donn√©es pour comprendre ce qu'il se passe.
""")


shown_samples = st.dataframe(df[df.quantity < 0].sample(
    10, random_state=13), use_container_width=True)

if st.button('Charger 10 autres exemples'):
    shown_samples.dataframe(
        df[df.quantity < 0].sample(10), use_container_width=True)

st.markdown("""
Vous pouvez maintenant s√©lectionner l'un des indices dans le DataFrame et le saisir dans la case ci-dessous.
Nous afficherons les 5 derni√®res ventes r√©alis√©es avant celle qui pose probl√®me.""")

idx = st.number_input(
    'Ins√©rez votre indice avec une quantit√© n√©gative', value=158888)

st.dataframe(df.iloc[idx-5:idx+1], use_container_width=True)

st.markdown("""
**Questions**:
- Qu'observez-vous ?
- Quelle est votre hypoth√®se ?
- Comment peut-on r√©soudre ce probl√®me ?""")

with st.expander("R√©ponse:"):
    st.markdown("""
    Vous l'aurez constat√©, lorsqu'on trouve une vente avec une quantit√© n√©gative, il existe une vente similaire avec une quantit√© positive juste avant.
    L'hypoth√®se de l'erreur de caisse semble s'av√©r√©rer. Il faudrait √©videmment v√©rifier cela avec une personne de la boulangerie.

    Pour r√©soudre ce probl√®me, nous devons donc annuler les deux ventes la positive et la n√©gative.""")

st.markdown("""
**Question**:
- En quoi garder ces deux ventes pourrait-il poser probl√®me pour l'analyse ? La somme de l'op√©ration est finalement nulle...


Appliquons maintenant le nettoyage des donn√©es.""")


@st.cache_data
def cancel_negative_sales(data):
    """
    This function takes a DataFrame as an argument and removes any row
    where the quantity of sales is a negative number and its corresponding
    sale with a positive quantity.

    Parameters
    ----------
    data : pd.DataFrame
        Original data

    Returns
    -------
    pd.DataFrame
        Cleaned DataFrame without negative quantity
    """

    # List of indices we'll delete
    idx_to_del = []

    # Go through each row of the DF where the quantity is negative
    for i, row in data[data.quantity < 0].iterrows():

        # Get the rows before the current one
        tmp = data.iloc[0:i]

        # Get the rows with the same article and the same quantity as a positive number
        tmp = tmp[(tmp.article == row.article) &
                  (tmp.quantity == -row.quantity)]

        # Get the latest index, i.e. the closest to the current one
        idx = tmp.index[-1]

        # Save the indices that we will remove
        idx_to_del.append(idx)
        idx_to_del.append(i)

    # Remove all the rows we don't want
    data = data.drop(idx_to_del, axis=0)

    # Reset the indices
    data = data.reset_index(drop=True)

    return data


df = cancel_negative_sales(df)

with st.expander("Vous voulez savoir √† quoi ressemble le code python pour cette √©tape ? Cliquez ici."):
    st.code(inspect.getsource(cancel_negative_sales), language='python')

st.markdown("""
Le probl√®me de quantit√© n√©gative devrait √™tre r√©solu.
Pour en √™tre absolument certain, observons √† nouveau les statistiques principales.
""")

st.dataframe(df.describe(), use_container_width=True)

st.markdown("""
Nous voyons dor√©navant que la quantit√© minimale est effectivement de 1.

Nous pouvons maintenant nous attaquer au probl√®me du `unit_price`.
""")

st.subheader("Nettoyez les probl√®mes de prix")

st.markdown("""
Comme pr√©c√©demment, observons les donn√©es quand le prix unitaire `unit_price` est √©gale √† 0.
""")

st.dataframe(df[df.unit_price == 0], use_container_width=True)

nbr_sales_0 = len(df[df.unit_price == 0])

st.markdown(f"""
Il y a  {nbr_sales_0} ventes avec un prix unitaire de 0.

**Question**:
- Que feriez-vous de ces valeurs ?""")

with st.expander("R√©ponse:"):
    st.markdown("""
    - Certaines de ces valeurs concernent un article vide ou non d√©fini repr√©sent√© par un point. Nous pouvons les supprimer.
    - Le nombre de ventes nulles est n√©gligeable par rapport √† la taille du jeu de donn√©es. Nous pouvons √©galement les supprimer.

    Il est tout de m√™me important de relever ces observations √† la boulangerie car derri√®re une petite anomalie de donn√©es se cache parfois un probl√®me s√©rieux de processus.

    Supprimons donc ces donn√©es et affichons les statistiques une derni√®re fois.
    """)

st.markdown("""
Voici une derni√®re fois nos statistiques de base:
    """)

df = df[df.unit_price > 0]

# We can run this to save the cleaned file
# df.to_csv('data/bakery_sales_cleaned.csv', index=False)

st.dataframe(df.describe(), use_container_width=True)

st.markdown("""
**F√©licitations!**
Le jeu de donn√©es est maintenant nettoy√© de ses impr√©cisions.

En bonus, vous avez gagn√© en maturti√© sur ces donn√©es. Vous savez dor√©navant les donn√©es disponibles, leurs valeurs attendues, ...


Vous pouvez d√©marrer dans l'analyse des donn√©es!
""")

if st.button('Aller vers üìà Data Analysis', type='primary', use_container_width=True):
    switch_page('Data_Analysis')
